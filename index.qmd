---
title: "Styringsinformasjon - sykepengeløsningen"
date-modified: last-modified
format:
    html:
        code-fold: true
        self-contained: true
---

```{python}
# | echo: false
import pandas as pd
import warnings
import os
import plotly.graph_objects as go
from dotenv import load_dotenv
from google.cloud import bigquery

warnings.filterwarnings(
    "ignore", "Your application has authenticated using end user credentials"
)

load_dotenv()
LOCATION = "europe-north1"
PROJECT = os.environ["GCP_TEAM_PROJECT_ID"]
```

```{python}
# | echo: false
client = bigquery.Client(location=LOCATION, project=PROJECT)
```

# 1. Mottatte søknader ny sykepengeløsning*

Dette handler om sykepengesøknader som leveres fra sykepengesøknadsmottaket og til ny sykepengeløsning.
Per juli 2023 omfatter dette arbeidstaker-søknader, med unntak av kode 6 (og altså ikke frilansere, næringsdrivende etc).
Søknader som er korrigeringer på tidligere søknader telles, både korrigert og korrigerende.


```{python}
#| echo: false
import datetime as dt

print(f"Nøkkeltall per {dt.datetime.now().date()}")
```

## Nøkkeltall - inneværende måned

```{python}
QUERY = """--sql
    SELECT
        COUNTIF(DATE(soknad_mottatt, 'Europe/Oslo') >= DATE_TRUNC(DATE(CURRENT_TIMESTAMP(), 'Europe/Oslo'), MONTH)) as `Mottatt denne måneden`,
        COUNTIF(DATE(soknad_mottatt, 'Europe/Oslo') = DATE(CURRENT_TIMESTAMP(), 'Europe/Oslo')) as `Mottatt i dag`,
        COUNTIF(DATE(soknad_mottatt, 'Europe/Oslo') = DATE_SUB(DATE(CURRENT_TIMESTAMP(), 'Europe/Oslo'), INTERVAL 1 DAY)) as `Mottatt i går`,
        COUNTIF(DATE(soknad_mottatt, 'Europe/Oslo') >= DATE_SUB(DATE(CURRENT_TIMESTAMP(), 'Europe/Oslo'), INTERVAL 1 WEEK) AND DATE(soknad_mottatt, 'Europe/Oslo') < DATE(CURRENT_TIMESTAMP(), 'Europe/Oslo')) as `Mottatt siste 7 dager`
    FROM `styringsinfo_dataset.styringsinfo_sendt_soknad_view`
"""

query_job = client.query(QUERY)
rows = query_job.result()

stats = [dict(row) for row in rows][0]
```

```{python}

for key, value in stats.items():
    print(f'### {key}')
    print(f'{value}')
```

```{python}

QUERY = f"""
    SELECT
        FORMAT_TIMESTAMP('%G%V', soknad_mottatt, 'Europe/Oslo') as week,
        COUNT(*) as total,
        COUNTIF(FORMAT_TIMESTAMP('%A', soknad_mottatt, 'Europe/Oslo') = 'Monday') as Monday,
        COUNTIF(FORMAT_TIMESTAMP('%A', soknad_mottatt, 'Europe/Oslo') = 'Tuesday') as Tuesday,
        COUNTIF(FORMAT_TIMESTAMP('%A', soknad_mottatt, 'Europe/Oslo') = 'Wednesday') as Wednesday,
        COUNTIF(FORMAT_TIMESTAMP('%A', soknad_mottatt, 'Europe/Oslo') = 'Thursday') as Thursday,
        COUNTIF(FORMAT_TIMESTAMP('%A', soknad_mottatt, 'Europe/Oslo') = 'Friday') as Friday,
        COUNTIF(FORMAT_TIMESTAMP('%A', soknad_mottatt, 'Europe/Oslo') = 'Saturday') as Saturday,
        COUNTIF(FORMAT_TIMESTAMP('%A', soknad_mottatt, 'Europe/Oslo') = 'Sunday') as Sunday
    FROM `styringsinfo_dataset.styringsinfo_sendt_soknad_view`
    GROUP BY week
    ORDER BY week DESC
"""

query_job = client.query(QUERY)

df_ukedager = query_job.to_dataframe()
```

```{python}
# Usikker på hvordan jeg får til å rendre Markdown med Quarto
from IPython.display import display_markdown
display_markdown(df_ukedager.to_markdown())
df_ukedager
```

```{python}
from plotly.subplots import make_subplots
import pandas_gbq

# SQL query to count number of rows per day and calculate 7 day moving average
QUERY = """
SELECT 
  date, 
  count,
  AVG(count) OVER (
    ORDER BY date
    ROWS BETWEEN 6 PRECEDING AND CURRENT ROW
  ) AS moving_avg
FROM (
  SELECT 
    DATE(soknad_mottatt) AS date,
    COUNT(*) AS count
  FROM 
    `styringsinfo_dataset.styringsinfo_sendt_soknad_view`
  GROUP BY 
    DATE(soknad_mottatt)
)
WHERE date > '2023-03-01'
ORDER BY 
  date
"""

# Execute the query and load the data into a pandas DataFrame
df = pandas_gbq.read_gbq(QUERY, PROJECT)

# Create subplots, which will have a bar chart and a line chart
fig = make_subplots(specs=[[{"secondary_y": True}]])

# Add bar chart for daily counts
fig.add_trace(
    go.Bar(x=df['date'], y=df['count'], name='Daily Counts'),
    secondary_y=False,
)

# Add line chart for 7 day moving average
fig.add_trace(
    go.Scatter(x=df['date'], y=df['moving_avg'], name='7-day Average'),
    secondary_y=False,
)

# Set x and y axis labels
fig.update_layout(
    title_text="Daily Counts and 7-day Moving Average",
    xaxis_title="Date",
    yaxis_title="Daily Count",
    yaxis2_title="7-day Moving Average"
)

# Show the figure
fig.show()
```

```{python}
df = df_ukedager
# Create a new plotly figure
fig = go.Figure()

# Create a line for each weekday
for day in ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']:
    fig.add_trace(go.Scatter(x=df['week'], y=df[day], mode='lines', name=day))

# Update the layout
fig.update_layout(
    title="Number of rows per day for each week",
    xaxis_title="Week",
    yaxis_title="Count",
)

# Show the figure
fig.show()

```
```{python}

import datetime as dt

print(f'Sist oppdatert: {dt.datetime.now()}')
```