---
title: "Styringsinformasjon for ny sykepengeløsning"
date-modified: last-modified
format:
    html:
        echo: false
        self-contained: true
        theme:
            - custom.scss
---



```{python}
import pandas as pd
import warnings
import os
import plotly.graph_objects as go
from dotenv import load_dotenv
from google.cloud import bigquery

warnings.filterwarnings(
    "ignore", "Your application has authenticated using end user credentials"
)
warnings.filterwarnings(
    "ignore", "A progress bar was requested, but there was an error loading the tqdm library."
)

load_dotenv()
LOCATION = "europe-north1"
PROJECT = os.environ["GCP_TEAM_PROJECT_ID"]

client = bigquery.Client(location=LOCATION, project=PROJECT)

norsk_dag = {
    "Monday": "Mandag",
    "Tuesday": "Tirsdag",
    "Wednesday": "Onsdag",
    "Thursday": "Torsdag",
    "Friday": "Fredag",
    "Saturday": "Lørdag",
    "Sunday": "Søndag",
}
```

:::: {#section-intro}

::: {#section-intro-content}

### Om fortellingen

Datafortellingen har som hensikt å gi grunnlag for bedre og mer presise prioriteringer knyttet til saksbehandling i nytt behandlingssystem for sykepenger. 

I fortellingen presenteres dataen kronologisk gjennom saksbehandlingsforløpet, fra en søknad om sykepenger er sendt, til vedtaket er fattet eller forkastet og sendt- eller ikke sendt til utbetaling.

::: {.callout-note collapse="true" appearance="minimal"}
## Mer om dataen som presenteres

Dataen som presenteres stammer kun fra nytt saksbehandlingssystem. Årsaken til dette er at vi har lite eller mangelfull data på saksbehandling av sykepenger i eldre behandlingssystemer. Samtidig har ikke PO Helse selv eierskap til dette, og derfor være sikre på at dataen stemmer.

Siden dataen er ment for å gjøre prioriteringer og strategiske veivalg i forbindelse med saksbehandling er det avgjørende at det som presenteres stemmer overens med det som faktisk skjer.

Foreløpig presenteres det i denne fortellingen data på innsendte søknader, fattede vedtak og forkastede vedtak. Det gjenstår fortsatt en del hendelsespunkter som omfatter for eksempel inntektsmeldinger, frister etc. Planen er å få dette på plass over tid.
:::

::: {.callout-note collapse="true" appearance="minimal"}
## Mer om teamet

Team Hvilepuls fra PO Helse har designet og drifter denne fortellingen. Teamet består av medlemmer forskjellige fagfelt, hentet fra ulike teams i produktområdet.

Vi ønsker å eie, drifte og formidle dataen vi selv genererer. På denne måten forsøker vi å sikre at dataen som formidles, stemmer overens med det som faktisk skjer.

[Les mer om teamet i Teamkatalogen.](https://teamkatalog.nav.no/team/ea2ba8f9-b956-4d78-857e-93e547449fc5){.external target="_blank"}
:::

:::

::::


:::: {#section1}

::: {#section1-content}


### 1# Innsendte søknader om sykepenger

#

::: {.callout-note appearance="simple"}

### Omfatter per i dag kun arbeidstakere (med unntak av sykmeldte med strengt fortrolig adresse) og søknader sendt til nytt saksbehandlingssystem (Speil).

:::

::: {.nokkeltall}

```{python}
# | class: nokkeltall
import datetime as dt

current_date = dt.datetime.now().date()
formatted_date = current_date.strftime("%d. %B %Y").replace(current_date.strftime("%B"), current_date.strftime("%B").lower())

print(f"Nøkkeltall per {formatted_date}")

```

:::

:::: {.nokkeltallboks-layout}

```{python}
# | class: nokkeltallboks-innhold

QUERY = """--sql
    SELECT
        COUNTIF(DATE(soknad_mottatt, 'Europe/Oslo') = DATE(CURRENT_TIMESTAMP(), 'Europe/Oslo')) as `innsendt i dag`
    FROM `styringsinfo_dataset.styringsinfo_sendt_soknad_view`
""" 

query_job = client.query(QUERY)
rows = query_job.result()

stats = [dict(row) for row in rows][0]

for key, value in stats.items():
    print(f"{value}\n{key}")

```

```{python}
# | class: nokkeltallboks-innhold

QUERY = """--sql
    SELECT
        COUNTIF(DATE(soknad_mottatt, 'Europe/Oslo') = DATE_SUB(DATE(CURRENT_TIMESTAMP(), 'Europe/Oslo'), INTERVAL 1 DAY)) as `innsendt i går`
    FROM `styringsinfo_dataset.styringsinfo_sendt_soknad_view`
""" 

query_job = client.query(QUERY)
rows = query_job.result()

stats = [dict(row) for row in rows][0]

for key, value in stats.items():
    print(f"{value}\n{key}")

```


```{python}
# | class: nokkeltallboks-innhold

QUERY = """--sql
    SELECT
        COUNTIF(DATE(soknad_mottatt, 'Europe/Oslo') >= DATE_TRUNC(DATE(CURRENT_TIMESTAMP(), 'Europe/Oslo'), MONTH)) as `totalt denne måneden`
    FROM `styringsinfo_dataset.styringsinfo_sendt_soknad_view`
""" 

query_job = client.query(QUERY)
rows = query_job.result()

stats = [dict(row) for row in rows][0]

for key, value in stats.items():
    print(f"{value}\n{key}")

```

::::

```{python}

# | class: no-rows
import datetime
import plotly.graph_objects as go

current_month = datetime.datetime.now().month
current_year = datetime.datetime.now().year

QUERY = f"""
    SELECT
        EXTRACT(YEAR FROM soknad_mottatt AT TIME ZONE 'Europe/Oslo') AS year,
        EXTRACT(MONTH FROM soknad_mottatt AT TIME ZONE 'Europe/Oslo') AS month,
        COUNT(*) as Totalt
    FROM `styringsinfo_dataset.styringsinfo_sendt_soknad_view`
    WHERE EXTRACT(YEAR FROM soknad_mottatt AT TIME ZONE 'Europe/Oslo') = {current_year}
        AND EXTRACT(MONTH FROM soknad_mottatt AT TIME ZONE 'Europe/Oslo') <= {current_month}
    GROUP BY year, month
    ORDER BY year DESC, month DESC
"""

query_job = client.query(QUERY)

df_months = query_job.to_dataframe()

# Create a new plotly figure
fig = go.Figure()

fig.add_trace(go.Bar(
    x=[f"{row['year']}-{row['month']:02}" for _, row in df_months.iterrows()],
    y=df_months['Totalt'],
    text=df_months['Totalt'],
    textposition='auto',
))

fig.update_traces(marker_color = 'rgba(176, 193, 200, 1)',
                  marker_line_width = 1, opacity = 1)

fig.update_layout(
    title="Mottatte søknader per måned",
    xaxis_title="Måned",
    yaxis_title="Antall",
    xaxis_tickangle=-45,
    paper_bgcolor='rgba(0,0,0,0)',
)

fig.show()

```

```{python}
from plotly.subplots import make_subplots
import pandas_gbq

# SQL query to count number of rows per day and calculate 7 day moving average
QUERY = """
SELECT 
  date, 
  count,
  AVG(count) OVER (
    ORDER BY date
    ROWS BETWEEN 6 PRECEDING AND CURRENT ROW
  ) AS moving_avg
FROM (
    SELECT date_range.date AS date, IFNULL(original_table.count, 0) AS count
        FROM (
            SELECT *
            FROM UNNEST(GENERATE_DATE_ARRAY('2023-03-01', CURRENT_DATE())) AS date
        ) AS date_range
    LEFT JOIN (
    SELECT
        DATE(soknad_mottatt) AS date,
        COUNT(*) AS count
      FROM
        `styringsinfo_dataset.styringsinfo_sendt_soknad_view`
      GROUP BY
        DATE(soknad_mottatt)
        ) AS original_table
    ON date_range.date = original_table.date
)
WHERE date > '2023-03-01'
ORDER BY 
  date
"""

# Execute the query and load the data into a pandas DataFrame
df = pandas_gbq.read_gbq(QUERY, PROJECT, progress_bar_type="None")

# Create subplots, which will have a bar chart and a line chart
fig = make_subplots(specs=[[{"secondary_y": True}]])

# Add bar chart for daily counts
fig.add_trace(
    go.Bar(x=df["date"], y=df["count"], name="Antall per dag"),
    secondary_y=False,
)

# Add line chart for 7 day moving average TODO: Den tar bare hensyn til dager med data!
fig.add_trace(
    go.Scatter(x=df["date"], y=df["moving_avg"], name="Snitt over 7 dager"),
    secondary_y=False,
)

# Set x and y axis labels
fig.update_layout(
    title_text="Antall mottatt per dag og 7-dagers glidende gjennomsnitt",
    xaxis_title="Dato",
    yaxis_title="Antall per dag",
    yaxis2_title="7-dagers glidende gjennomsnitt",
)

# Show the figure
fig.show()
```

:::

::::


:::: {#section2}

::: {#section2-content}

### 2# Fattede vedtak

#

Et fattet vedtak betyr at saksbehandlingssystemet har vurdert en (eller fler) søknad om sykepenger med tilhørende dokumentasjon og avgjort om denne personen har krav, eller ikke krav på sykepenger. Når vedtaket er fattet får sykmeldt bruker resultatet skriftlig. Når et godkjent vedtak fattes, går det videre til utbetaling til sykmeldt bruker, eller refunderes til arbeidsgiver.

Fattede vedtak som vises gjelder bare de som fattes i ny sykepengeløsning. Per juli 2023 omfatter dette arbeidstakere, med unntak av kode 6 (ikke frilansere, næringsdrivende etc.). 

#

::: {.nokkeltall}

```{python}
# | class: nokkeltall
import datetime as dt

current_date = dt.datetime.now().date()
formatted_date = current_date.strftime("%d. %B %Y").replace(current_date.strftime("%B"), current_date.strftime("%B").lower())

print(f"Nøkkeltall per {formatted_date}")

```

:::

::: {.nokkeltallboks-layout}

```{python}
# | class: nokkeltallboks-innhold-hvit

QUERY = """--sql
    SELECT
        COUNTIF(DATE(vedtak_fattet, 'Europe/Oslo') = DATE(CURRENT_TIMESTAMP(), 'Europe/Oslo')) as `fattet i dag`
    FROM `styringsinfo_dataset.styringsinfo_vedtak_fattet_view`
""" 

query_job = client.query(QUERY)
rows = query_job.result()

stats = [dict(row) for row in rows][0]

for key, value in stats.items():
    print(f"{value}\n{key}")

```


```{python}
# | class: nokkeltallboks-innhold-hvit

QUERY = """--sql
    SELECT
        COUNTIF(DATE(vedtak_fattet, 'Europe/Oslo') = DATE_SUB(DATE(CURRENT_TIMESTAMP(), 'Europe/Oslo'), INTERVAL 1 DAY)) as `fattet i går`
    FROM `styringsinfo_dataset.styringsinfo_vedtak_fattet_view`
""" 

query_job = client.query(QUERY)
rows = query_job.result()

stats = [dict(row) for row in rows][0]

for key, value in stats.items():
    print(f"{value}\n{key}")

```


```{python}
# | class: nokkeltallboks-innhold-hvit

QUERY = """--sql
    SELECT
        COUNTIF(DATE(vedtak_fattet, 'Europe/Oslo') >= DATE_TRUNC(DATE(CURRENT_TIMESTAMP(), 'Europe/Oslo'), MONTH)) as `fattet denne måneden`
    FROM `styringsinfo_dataset.styringsinfo_vedtak_fattet_view`
""" 

query_job = client.query(QUERY)
rows = query_job.result()

stats = [dict(row) for row in rows][0]

for key, value in stats.items():
    print(f"{value}\n{key}")

```

```{python}

# | class: nokkeltallboks-innhold-hvit

QUERY = """--sql
    select
     countif(
        extract(
            week from DATE(vedtak_fattet, 'Europe/Oslo')
        ) = extract(WEEK from current_date())
     ) as `fattet hittil denne uken`
    from `styringsinfo_dataset.styringsinfo_vedtak_fattet_view`
"""

query_job = client.query(QUERY)
rows = query_job.result()

stats = [dict(row) for row in rows][0]

for key, value in stats.items():
    print(f"{value}\n{key}")

```

```{python}

# | class: nokkeltallboks-innhold-hvit

QUERY = """--sql
    select
     countif(
        extract(
            week from DATE(vedtak_fattet, 'Europe/Oslo')
        ) = extract(WEEK from current_date()) - 1
     ) as `fattet forrige uke`
    from `styringsinfo_dataset.styringsinfo_vedtak_fattet_view`
"""

query_job = client.query(QUERY)
rows = query_job.result()

stats = [dict(row) for row in rows][0]

for key, value in stats.items():
    print(f"{value}\n{key}")

```

```{python}

# | class: nokkeltallboks-innhold-hvit

QUERY = """--sql
    select
     countif(
        extract(
            week from DATE(vedtak_fattet, 'Europe/Oslo')
        ) = extract(WEEK from current_date()) - 2
     ) as `fattet for to uker siden`
    from `styringsinfo_dataset.styringsinfo_vedtak_fattet_view`
"""

query_job = client.query(QUERY)
rows = query_job.result()

stats = [dict(row) for row in rows][0]

for key, value in stats.items():
    print(f"{value}\n{key}")

```

:::

#

```{python}

# | class: no-rows
import datetime
import plotly.graph_objects as go

current_month = datetime.datetime.now().month
current_year = datetime.datetime.now().year

QUERY = f"""
    SELECT
        EXTRACT(YEAR FROM vedtak_fattet AT TIME ZONE 'Europe/Oslo') AS year,
        EXTRACT(MONTH FROM vedtak_fattet AT TIME ZONE 'Europe/Oslo') AS month,
        COUNT(*) as Totalt
    FROM `styringsinfo_dataset.styringsinfo_vedtak_fattet_view`
    WHERE EXTRACT(YEAR FROM vedtak_fattet AT TIME ZONE 'Europe/Oslo') = {current_year}
        AND EXTRACT(MONTH FROM vedtak_fattet AT TIME ZONE 'Europe/Oslo') <= {current_month}
    GROUP BY year, month
    ORDER BY year DESC, month DESC
"""

query_job = client.query(QUERY)

df_months = query_job.to_dataframe()

# Create a new plotly figure
fig = go.Figure()

fig.add_trace(go.Bar(
    x=[f"{row['year']}-{row['month']:02}" for _, row in df_months.iterrows()],
    y=df_months['Totalt'],
    text=df_months['Totalt'],
    textposition='auto',
))

fig.update_traces(marker_color = 'rgba(176, 193, 200, 1)',
                  marker_line_width = 1, opacity = 1)

fig.update_layout(
    title="Fattede vedtak per måned",
    xaxis_title="Måned",
    yaxis_title="Antall fattede vedtak",
    xaxis_tickangle=-45,
    paper_bgcolor='rgba(0,0,0,0)',
    plot_bgcolor='rgba(0,0,0,0)',
)

fig.show()

```

```{python}
from plotly.subplots import make_subplots
import pandas_gbq

# SQL query to count number of rows per day and calculate 7 day moving average
QUERY = """
SELECT
  date,
  count,
  AVG(count) OVER (
    ORDER BY date
    ROWS BETWEEN 6 PRECEDING AND CURRENT ROW
  ) AS moving_avg
FROM (
    SELECT date_range.date AS date, IFNULL(original_table.count, 0) AS count
        FROM (
            SELECT *
            FROM UNNEST(GENERATE_DATE_ARRAY('2023-03-01', CURRENT_DATE())) AS date
        ) AS date_range
    LEFT JOIN (
    SELECT
        DATE(vedtak_fattet) AS date,
        COUNT(*) AS count
      FROM
        `styringsinfo_dataset.styringsinfo_vedtak_fattet_view`
      GROUP BY
        DATE(vedtak_fattet)
        ) AS original_table
    ON date_range.date = original_table.date
)
WHERE date > '2023-03-01'
ORDER BY
  date
"""

# Execute the query and load the data into a pandas DataFrame
df = pandas_gbq.read_gbq(QUERY, PROJECT, progress_bar_type="None")

# Create subplots, which will have a bar chart and a line chart
fig = make_subplots(specs=[[{"secondary_y": True}]])

# Add bar chart for daily counts
fig.add_trace(
    go.Bar(x=df["date"], y=df["count"], name="Antall per dag"),
    secondary_y=False,
)

# Add line chart for 7 day moving average TODO: Den tar bare hensyn til dager med data!
fig.add_trace(
    go.Scatter(x=df["date"], y=df["moving_avg"], name="Snitt over 7 dager"),
    secondary_y=False,
)

# Set x and y axis labels
fig.update_layout(
    title_text="Antall vedtak fattet per dag og 7-dagers glidende gjennomsnitt",
    xaxis_title="Dato",
    yaxis_title="Antall per dag",
    yaxis2_title="7-dagers glidende gjennomsnitt",
    paper_bgcolor='rgba(0,0,0,0)',
    plot_bgcolor='rgba(0,0,0,0)',
)

# Show the figure
fig.show()
```

```{python}
import pandas_gbq

QUERY = f"""
WITH agg as (
    SELECT COUNT(*) AS antall_vedtak, dager_brukt
    FROM `styringsinfo_dataset.styringsinfo_vedtak_tidsbruk`
    WHERE vedtak_fattet_dato = CURRENT_DATE() -1
    GROUP BY dager_brukt
    ORDER BY dager_brukt desc
),
    agg_buckets AS (
    SELECT SUM(antall_vedtak) AS sum_vedtak, 'alle' AS vindu, 1 AS rekkefolge from agg
    UNION ALL
    select SUM(antall_vedtak), 'under én dag', 2 from agg WHERE dager_brukt = 0
    UNION ALL
    select SUM(antall_vedtak), 'én dag til én uke', 3 from agg WHERE dager_brukt > 0 AND dager_brukt <7
    UNION ALL
    select SUM(antall_vedtak), 'én til fire uker', 4 from agg WHERE dager_brukt >= 7 AND dager_brukt < 28
    UNION ALL
    select SUM(antall_vedtak), 'fire til åtte uker', 5 from agg WHERE dager_brukt >= 28 AND dager_brukt < 56
    UNION ALL
    SELECT SUM(antall_vedtak), 'åtte uker eller mer', 6 FROM agg WHERE dager_brukt >= 56
)
SELECT sum_vedtak, vindu FROM agg_buckets ORDER BY rekkefolge;
"""

df = pandas_gbq.read_gbq(QUERY, PROJECT, progress_bar_type="None")

fig = make_subplots()

fig.add_trace(
    go.Bar(x=df["vindu"], y=df["sum_vedtak"], name="Hvor mange dager har det gått fra vi mottok en søknad til vi fattet et vedtak"),
    secondary_y=False,
)

fig.update_layout(
    title_text="Hvor mange dager har det gått fra vi mottok en søknad for vedtak fattet i går",
    xaxis_title="",
    yaxis_title="Antall vedtak",
    xaxis_tickangle=-45,
    paper_bgcolor='rgba(0,0,0,0)',
    plot_bgcolor='rgba(0,0,0,0)',
)

fig.show()

```

#

:::

::::

:::: {#section3}

::: {#section3-content}

### 3# Forkastede vedtaksperioder

#

En forkastet vedtaksperiode betyr at saksbehandlingssystemet har vurdert at perioden det søkes for ikke kan behandles i speil. Det trenger ikke nødvendigvis medføre at det opprettes gosys-oppgaver for de tilhørende søknadene. Det opprettes ikke oppgaver for korte perioder som er innenfor arbeidsgiverperioden. 

#

:::: {.nokkeltallboks-layout}

```{python}
# | class: nokkeltallboks-innhold

QUERY = """--sql
    SELECT
        COUNTIF(DATE(vedtak_forkastet, 'Europe/Oslo') = DATE(CURRENT_TIMESTAMP(), 'Europe/Oslo')) as `forkastet i dag`
    FROM `styringsinfo_dataset.styringsinfo_vedtak_forkastet_view`
""" 

query_job = client.query(QUERY)
rows = query_job.result()

stats = [dict(row) for row in rows][0]

for key, value in stats.items():
    print(f"{value}\n{key}")

```

```{python}
# | class: nokkeltallboks-innhold

QUERY = """--sql
    SELECT
        COUNTIF(DATE(vedtak_forkastet, 'Europe/Oslo') = DATE_SUB(DATE(CURRENT_TIMESTAMP(), 'Europe/Oslo'), INTERVAL 1 DAY)) as `forkastet i går`
    FROM `styringsinfo_dataset.styringsinfo_vedtak_forkastet_view`
""" 

query_job = client.query(QUERY)
rows = query_job.result()

stats = [dict(row) for row in rows][0]

for key, value in stats.items():
    print(f"{value}\n{key}")

```


```{python}
# | class: nokkeltallboks-innhold

QUERY = """--sql
    SELECT
        COUNTIF(DATE(vedtak_forkastet, 'Europe/Oslo') >= DATE_TRUNC(DATE(CURRENT_TIMESTAMP(), 'Europe/Oslo'), MONTH)) as `forkastet denne måneden`
    FROM `styringsinfo_dataset.styringsinfo_vedtak_forkastet_view`
""" 

query_job = client.query(QUERY)
rows = query_job.result()

stats = [dict(row) for row in rows][0]

for key, value in stats.items():
    print(f"{value}\n{key}")

```

::::

#

```{python}

# | class: no-rows
import datetime
import plotly.graph_objects as go

current_month = datetime.datetime.now().month
current_year = datetime.datetime.now().year

QUERY = f"""
    SELECT
        EXTRACT(YEAR FROM vedtak_forkastet AT TIME ZONE 'Europe/Oslo') AS year,
        EXTRACT(MONTH FROM vedtak_forkastet AT TIME ZONE 'Europe/Oslo') AS month,
        COUNT(*) as Totalt
    FROM `styringsinfo_dataset.styringsinfo_vedtak_forkastet_view`
    WHERE EXTRACT(YEAR FROM vedtak_forkastet AT TIME ZONE 'Europe/Oslo') = {current_year}
        AND EXTRACT(MONTH FROM vedtak_forkastet AT TIME ZONE 'Europe/Oslo') <= {current_month}
    GROUP BY year, month
    ORDER BY year DESC, month DESC;
"""

query_job = client.query(QUERY)

df_months = query_job.to_dataframe()

# Create a new plotly figure
fig = go.Figure()

fig.add_trace(go.Bar(
    x=[f"{row['year']}-{row['month']:02}" for _, row in df_months.iterrows()],
    y=df_months['Totalt'],
    text=df_months['Totalt'],
    textposition='auto',
))

fig.update_traces(marker_color = 'rgba(176, 193, 200, 1)',
                  marker_line_width = 1, opacity = 1)

fig.update_layout(
    title="Forkastede vedtaksperioder per måned",
    xaxis_title="Måned",
    yaxis_title="Antall",
    xaxis_tickangle=-45,
    paper_bgcolor='rgba(0,0,0,0)',
)

fig.show()

```

#
```{python}
import datetime as dt

print(f"Sist oppdatert: {dt.datetime.now()}")
```


:::

::::