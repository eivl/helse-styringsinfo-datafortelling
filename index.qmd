---
title: "Søknad om sykepenger i ny sykepengeløsning"
date-modified: last-modified
format:
    html:
        echo: false
        self-contained: true
        theme:
            - custom.scss

---

```{python}
import pandas as pd
import warnings
import os
import plotly.graph_objects as go
from dotenv import load_dotenv
from google.cloud import bigquery

warnings.filterwarnings(
    "ignore", "Your application has authenticated using end user credentials"
)
warnings.filterwarnings(
    "ignore", "A progress bar was requested, but there was an error loading the tqdm library."
)

load_dotenv()
LOCATION = "europe-north1"
PROJECT = os.environ["GCP_TEAM_PROJECT_ID"]

client = bigquery.Client(location=LOCATION, project=PROJECT)

norsk_dag = {
    "Monday": "Mandag",
    "Tuesday": "Tirsdag",
    "Wednesday": "Onsdag",
    "Thursday": "Torsdag",
    "Friday": "Fredag",
    "Saturday": "Lørdag",
    "Sunday": "Søndag",
}
```

:::: {#section1}

::: {#section1-content}

### Mottatte søknader

Søknadene som vises gjelder de som mottas i ny sykepengeløsning. Per juli 2023 omfatter dette arbeidstaker-søknader, med unntak av kode 6 (ikke frilansere/næringsdrivende). Søknader som er korrigert på tidligere søknader telles, både korrigert og korrigerende.

Datoen som refereres til er datoen for når søknaden ble sendt første gang (så dersom en søknad oppdateres så er datoen fortsatt den originale innsendingsdatoen).

#

::: {.nokkeltall}

```{python}
# | class: nokkeltall
import datetime as dt

current_date = dt.datetime.now().date()
formatted_date = current_date.strftime("%d. %B %Y").replace(current_date.strftime("%B"), current_date.strftime("%B").lower())

print(f"Nøkkeltall per {formatted_date}")

```

:::

:::: {.nokkeltallboks-layout}

```{python}
# | class: nokkeltallboks-innhold

QUERY = """--sql
    SELECT
        COUNTIF(DATE(soknad_mottatt, 'Europe/Oslo') = DATE(CURRENT_TIMESTAMP(), 'Europe/Oslo')) as `mottatt i dag`
    FROM `styringsinfo_dataset.styringsinfo_sendt_soknad_view`
""" 

query_job = client.query(QUERY)
rows = query_job.result()

stats = [dict(row) for row in rows][0]

for key, value in stats.items():
    print(f"{value}\n{key}")

```

```{python}
# | class: nokkeltallboks-innhold

QUERY = """--sql
    SELECT
        COUNTIF(DATE(soknad_mottatt, 'Europe/Oslo') = DATE_SUB(DATE(CURRENT_TIMESTAMP(), 'Europe/Oslo'), INTERVAL 1 DAY)) as `mottatt i går`
    FROM `styringsinfo_dataset.styringsinfo_sendt_soknad_view`
""" 

query_job = client.query(QUERY)
rows = query_job.result()

stats = [dict(row) for row in rows][0]

for key, value in stats.items():
    print(f"{value}\n{key}")

```


```{python}
# | class: nokkeltallboks-innhold

QUERY = """--sql
    SELECT
        COUNTIF(DATE(soknad_mottatt, 'Europe/Oslo') >= DATE_TRUNC(DATE(CURRENT_TIMESTAMP(), 'Europe/Oslo'), MONTH)) as `totalt denne måneden`
    FROM `styringsinfo_dataset.styringsinfo_sendt_soknad_view`
""" 

query_job = client.query(QUERY)
rows = query_job.result()

stats = [dict(row) for row in rows][0]

for key, value in stats.items():
    print(f"{value}\n{key}")

```

::::

```{python}

# | class: no-rows
import datetime
import plotly.graph_objects as go

current_month = datetime.datetime.now().month
current_year = datetime.datetime.now().year

QUERY = f"""
    SELECT
        EXTRACT(YEAR FROM soknad_mottatt AT TIME ZONE 'Europe/Oslo') AS year,
        EXTRACT(MONTH FROM soknad_mottatt AT TIME ZONE 'Europe/Oslo') AS month,
        COUNT(*) as Totalt
    FROM `styringsinfo_dataset.styringsinfo_sendt_soknad_view`
    WHERE EXTRACT(YEAR FROM soknad_mottatt AT TIME ZONE 'Europe/Oslo') = {current_year}
        AND EXTRACT(MONTH FROM soknad_mottatt AT TIME ZONE 'Europe/Oslo') <= {current_month}
    GROUP BY year, month
    ORDER BY year DESC, month DESC
"""

query_job = client.query(QUERY)

df_months = query_job.to_dataframe()

# Create a new plotly figure
fig = go.Figure()

fig.add_trace(go.Bar(
    x=[f"{row['year']}-{row['month']:02}" for _, row in df_months.iterrows()],
    y=df_months['Totalt'],
    text=df_months['Totalt'],
    textposition='auto',
))

fig.update_traces(marker_color = 'rgba(176, 193, 200, 1)',
                  marker_line_width = 1, opacity = 1)

fig.update_layout(
    title="Mottatte søknader per måned",
    xaxis_title="Måned",
    yaxis_title="Antall",
    xaxis_tickangle=-45,
    paper_bgcolor='rgba(0,0,0,0)',
)

fig.show()

```


```{python}
# | class: no-rows
import datetime

current_week = datetime.datetime.now().isocalendar()[1]

QUERY = f"""
    SELECT
        EXTRACT(ISOWEEK FROM soknad_mottatt AT TIME ZONE 'Europe/Oslo') AS week_number,
        COUNTIF(EXTRACT(DAYOFWEEK FROM soknad_mottatt AT TIME ZONE 'Europe/Oslo') = 2) as Monday,
        COUNTIF(EXTRACT(DAYOFWEEK FROM soknad_mottatt AT TIME ZONE 'Europe/Oslo') = 3) as Tuesday,
        COUNTIF(EXTRACT(DAYOFWEEK FROM soknad_mottatt AT TIME ZONE 'Europe/Oslo') = 4) as Wednesday,
        COUNTIF(EXTRACT(DAYOFWEEK FROM soknad_mottatt AT TIME ZONE 'Europe/Oslo') = 5) as Thursday,
        COUNTIF(EXTRACT(DAYOFWEEK FROM soknad_mottatt AT TIME ZONE 'Europe/Oslo') = 6) as Friday,
        COUNTIF(EXTRACT(DAYOFWEEK FROM soknad_mottatt AT TIME ZONE 'Europe/Oslo') = 7) as Saturday,
        COUNTIF(EXTRACT(DAYOFWEEK FROM soknad_mottatt AT TIME ZONE 'Europe/Oslo') = 1) as Sunday,
        COUNT(*) as Totalt
    FROM `styringsinfo_dataset.styringsinfo_sendt_soknad_view`
    WHERE EXTRACT(ISOWEEK FROM soknad_mottatt AT TIME ZONE 'Europe/Oslo') <= {current_week}
    GROUP BY week_number
    ORDER BY week_number DESC
"""

query_job = client.query(QUERY)

df_ukedager = query_job.to_dataframe()

df = df_ukedager
# Create a new plotly figure
fig = go.Figure()

# Create a line for each weekday
for day in [
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
    "Sunday",
]:
    fig.add_trace(
        go.Scatter(x=df["week_number"], y=df[day], mode="lines", name=norsk_dag[day])
    )

# Update the layout
fig.update_layout(
    title_text="Antall per dag for hver uke",
    xaxis_title="Uke",
    yaxis_title="Antall",
    height=400
)

# Show the figure
fig.show()

```

```{python}
from plotly.subplots import make_subplots
import pandas_gbq

# SQL query to count number of rows per day and calculate 7 day moving average
QUERY = """
SELECT 
  date, 
  count,
  AVG(count) OVER (
    ORDER BY date
    ROWS BETWEEN 6 PRECEDING AND CURRENT ROW
  ) AS moving_avg
FROM (
    SELECT date_range.date AS date, IFNULL(original_table.count, 0) AS count
        FROM (
            SELECT *
            FROM UNNEST(GENERATE_DATE_ARRAY('2023-03-01', CURRENT_DATE())) AS date
        ) AS date_range
    LEFT JOIN (
    SELECT
        DATE(soknad_mottatt) AS date,
        COUNT(*) AS count
      FROM
        `styringsinfo_dataset.styringsinfo_sendt_soknad_view`
      GROUP BY
        DATE(soknad_mottatt)
        ) AS original_table
    ON date_range.date = original_table.date
)
WHERE date > '2023-03-01'
ORDER BY 
  date
"""

# Execute the query and load the data into a pandas DataFrame
df = pandas_gbq.read_gbq(QUERY, PROJECT, progress_bar_type="None")

# Create subplots, which will have a bar chart and a line chart
fig = make_subplots(specs=[[{"secondary_y": True}]])

# Add bar chart for daily counts
fig.add_trace(
    go.Bar(x=df["date"], y=df["count"], name="Antall per dag"),
    secondary_y=False,
)

# Add line chart for 7 day moving average TODO: Den tar bare hensyn til dager med data!
fig.add_trace(
    go.Scatter(x=df["date"], y=df["moving_avg"], name="Snitt over 7 dager"),
    secondary_y=False,
)

# Set x and y axis labels
fig.update_layout(
    title_text="Antall mottatt per dag og 7-dagers glidende gjennomsnitt",
    xaxis_title="Dato",
    yaxis_title="Antall per dag",
    yaxis2_title="7-dagers glidende gjennomsnitt",
)

# Show the figure
fig.show()
```

:::

::::


:::: {#section2}

::: {#section2-content}

### Fattede vedtak

Et fattet vedtak betyr at saksbehandlingssystemet har vurdert en (eller fler) søknad om sykepenger med tilhørende dokumentasjon og avgjort om denne personen har krav, eller ikke krav på sykepenger. Når vedtaket er fattet får sykmeldt bruker resultatet skriftlig. Når et godkjent vedtak fattes, går det videre til utbetaling til sykmeldt bruker, eller refunderes til arbeidsgiver.

Fattede vedtak som vises gjelder bare de som fattes i ny sykepengeløsning. Per juli 2023 omfatter dette arbeidstakere, med unntak av kode 6 (ikke frilansere, næringsdrivende etc.). 

#

::: {.nokkeltall}

```{python}
# | class: nokkeltall
import datetime as dt

current_date = dt.datetime.now().date()
formatted_date = current_date.strftime("%d. %B %Y").replace(current_date.strftime("%B"), current_date.strftime("%B").lower())

print(f"Nøkkeltall per {formatted_date}")

```

:::

::: {.nokkeltallboks-layout}

```{python}
# | class: nokkeltallboks-innhold

QUERY = """--sql
    SELECT
        COUNTIF(DATE(vedtak_fattet, 'Europe/Oslo') = DATE(CURRENT_TIMESTAMP(), 'Europe/Oslo')) as `fattet i dag`
    FROM `styringsinfo_dataset.styringsinfo_vedtak_fattet_view`
""" 

query_job = client.query(QUERY)
rows = query_job.result()

stats = [dict(row) for row in rows][0]

for key, value in stats.items():
    print(f"{value}\n{key}")

```


```{python}
# | class: nokkeltallboks-innhold

QUERY = """--sql
    SELECT
        COUNTIF(DATE(vedtak_fattet, 'Europe/Oslo') = DATE_SUB(DATE(CURRENT_TIMESTAMP(), 'Europe/Oslo'), INTERVAL 1 DAY)) as `fattet i går`
    FROM `styringsinfo_dataset.styringsinfo_vedtak_fattet_view`
""" 

query_job = client.query(QUERY)
rows = query_job.result()

stats = [dict(row) for row in rows][0]

for key, value in stats.items():
    print(f"{value}\n{key}")

```


```{python}
# | class: nokkeltallboks-innhold

QUERY = """--sql
    SELECT
        COUNTIF(DATE(vedtak_fattet, 'Europe/Oslo') >= DATE_TRUNC(DATE(CURRENT_TIMESTAMP(), 'Europe/Oslo'), MONTH)) as `fattet denne måneden`
    FROM `styringsinfo_dataset.styringsinfo_vedtak_fattet_view`
""" 

query_job = client.query(QUERY)
rows = query_job.result()

stats = [dict(row) for row in rows][0]

for key, value in stats.items():
    print(f"{value}\n{key}")

```

:::

#

```{python}

# | class: no-rows
import datetime
import plotly.graph_objects as go

current_month = datetime.datetime.now().month
current_year = datetime.datetime.now().year

QUERY = f"""
    SELECT
        EXTRACT(YEAR FROM vedtak_fattet AT TIME ZONE 'Europe/Oslo') AS year,
        EXTRACT(MONTH FROM vedtak_fattet AT TIME ZONE 'Europe/Oslo') AS month,
        COUNT(*) as Totalt
    FROM `styringsinfo_dataset.styringsinfo_vedtak_fattet_view`
    WHERE EXTRACT(YEAR FROM vedtak_fattet AT TIME ZONE 'Europe/Oslo') = {current_year}
        AND EXTRACT(MONTH FROM vedtak_fattet AT TIME ZONE 'Europe/Oslo') <= {current_month}
    GROUP BY year, month
    ORDER BY year DESC, month DESC
"""

query_job = client.query(QUERY)

df_months = query_job.to_dataframe()

# Create a new plotly figure
fig = go.Figure()

fig.add_trace(go.Bar(
    x=[f"{row['year']}-{row['month']:02}" for _, row in df_months.iterrows()],
    y=df_months['Totalt'],
    text=df_months['Totalt'],
    textposition='auto',
))

fig.update_traces(marker_color = 'rgba(176, 193, 200, 1)',
                  marker_line_width = 1, opacity = 1)

fig.update_layout(
    title="Fattede vedtak per måned",
    xaxis_title="Måned",
    yaxis_title="Antall fattede vedtak",
    xaxis_tickangle=-45,
    paper_bgcolor='rgba(0,0,0,0)',
    plot_bgcolor='rgba(0,0,0,0)',
)

fig.show()

```

```{python}
from plotly.subplots import make_subplots
import pandas_gbq

# SQL query to count number of rows per day and calculate 7 day moving average
QUERY = """
SELECT
  date,
  count,
  AVG(count) OVER (
    ORDER BY date
    ROWS BETWEEN 6 PRECEDING AND CURRENT ROW
  ) AS moving_avg
FROM (
    SELECT date_range.date AS date, IFNULL(original_table.count, 0) AS count
        FROM (
            SELECT *
            FROM UNNEST(GENERATE_DATE_ARRAY('2023-03-01', CURRENT_DATE())) AS date
        ) AS date_range
    LEFT JOIN (
    SELECT
        DATE(vedtak_fattet) AS date,
        COUNT(*) AS count
      FROM
        `styringsinfo_dataset.styringsinfo_vedtak_fattet_view`
      GROUP BY
        DATE(vedtak_fattet)
        ) AS original_table
    ON date_range.date = original_table.date
)
WHERE date > '2023-03-01'
ORDER BY
  date
"""

# Execute the query and load the data into a pandas DataFrame
df = pandas_gbq.read_gbq(QUERY, PROJECT, progress_bar_type="None")

# Create subplots, which will have a bar chart and a line chart
fig = make_subplots(specs=[[{"secondary_y": True}]])

# Add bar chart for daily counts
fig.add_trace(
    go.Bar(x=df["date"], y=df["count"], name="Antall per dag"),
    secondary_y=False,
)

# Add line chart for 7 day moving average TODO: Den tar bare hensyn til dager med data!
fig.add_trace(
    go.Scatter(x=df["date"], y=df["moving_avg"], name="Snitt over 7 dager"),
    secondary_y=False,
)

# Set x and y axis labels
fig.update_layout(
    title_text="Antall vedtak fattet per dag og 7-dagers glidende gjennomsnitt",
    xaxis_title="Dato",
    yaxis_title="Antall per dag",
    yaxis2_title="7-dagers glidende gjennomsnitt",
    paper_bgcolor='rgba(0,0,0,0)',
    plot_bgcolor='rgba(0,0,0,0)',
)

# Show the figure
fig.show()
```

```{python}
import pandas_gbq

QUERY = """
with agg as (SELECT count(*) as antall_vedtak, dager_brukt FROM `tbd-prod-eacd.styringsinfo_dataset.styringsinfo_vedtak_tidsbruk` 
group by(dager_brukt)
order by dager_brukt desc)
select sum(antall_vedtak) as sum_vedtak, 'alle' as vindu from agg
union all
select sum(antall_vedtak), 'under én dag' from agg where dager_brukt = 0
union all
select sum(antall_vedtak), 'én dag til én uke' from agg where dager_brukt > 0 and dager_brukt <7
union all
select sum(antall_vedtak), 'én til fire uker' from agg where dager_brukt >= 7 and dager_brukt < 28
union all
select sum(antall_vedtak), 'fire til åtte uker' from agg where dager_brukt >= 28 and dager_brukt < 56
union all
select sum(antall_vedtak), 'åtte uker eller mer' from agg where dager_brukt >= 56;
"""

df = pandas_gbq.read_gbq(QUERY, PROJECT, progress_bar_type="None")

fig = make_subplots()

fig.add_trace(
    go.Bar(x=df["vindu"], y=df["sum_vedtak"], name="Hvor mange dager har det gått fra vi mottok en søknad til vi fattet et vedtak"),
    secondary_y=False,
)

fig.update_layout(
    title_text="Hvor mange dager har det gått fra vi mottok en søknad til vi fattet et vedtak",
    xaxis_title="",
    yaxis_title="Antall vedtak",
    paper_bgcolor='rgba(0,0,0,0)',
    plot_bgcolor='rgba(0,0,0,0)',
)

fig.show()

```



#

```{python}
import datetime as dt

print(f"Sist oppdatert: {dt.datetime.now()}")
```

:::

::::