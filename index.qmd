---
title: "Styringsinformasjon fra ny sykepengeløsning"
date-modified: last-modified
execute:
    output: false
    echo: false
format:
    html:
        self-contained: true
        theme:
            - custom.scss
---



```{python}
import datetime
from datetime import date
import pandas as pd
import warnings
import os
import plotly.graph_objects as go
from dotenv import load_dotenv
from google.cloud import bigquery
import plotly.express as px
from functools import partial

warnings.filterwarnings(
    "ignore", "Your application has authenticated using end user credentials"
)
warnings.filterwarnings(
    "ignore",
    "A progress bar was requested, but there was an error loading the tqdm library.",
)

load_dotenv(override=True)
LOCATION = "europe-north1"
PROJECT = os.environ["GCP_TEAM_PROJECT_ID"]

client = bigquery.Client(location=LOCATION, project=PROJECT)

norsk_dag = {
    "Monday": "Mandag",
    "Tuesday": "Tirsdag",
    "Wednesday": "Onsdag",
    "Thursday": "Torsdag",
    "Friday": "Fredag",
    "Saturday": "Lørdag",
    "Sunday": "Søndag",
}

månednavn = {
    1: "Januar",
    2: "Februar",
    3: "Mars",
    4: "April",
    5: "Mai",
    6: "Juni",
    7: "Juli",
    8: "August",
    9: "September",
    10: "Oktober",
    11: "November",
    12: "Desember",
}
```

:::: {#section-intro}

::: {#section-intro-content}

### Om fortellingen

Denne fortellingen har som hensikt å formidle styringsdata fra den nye sykepengeløsningen (Speil) i PO Helse.

Per nå omfatter dataen kun arbeidstakere, med unntak av sykmeldte brukere med strengt fortrolig adresse (kode 6).

#

::: {.callout-note collapse="true" appearance="minimal"}
## Mer om dataen som presenteres

Dataen som presenteres stammer kun fra nytt saksbehandlingssystem. Årsaken til dette er at vi har lite eller mangelfull data på saksbehandling av sykepenger i eldre behandlingssystemer. Samtidig har ikke PO Helse selv eierskap til dette, og derfor være sikre på at dataen stemmer.

Siden dataen er ment for å gjøre prioriteringer og strategiske veivalg i forbindelse med saksbehandling er det avgjørende at det som presenteres stemmer overens med det som faktisk skjer.

Foreløpig presenteres det i denne fortellingen data på innsendte søknader, fattede vedtak og forkastede vedtak. Det gjenstår fortsatt en del hendelsespunkter som omfatter for eksempel inntektsmeldinger, frister etc. Planen er å få dette på plass over tid.
:::

::: {.callout-note collapse="true" appearance="minimal"}
## Mer om teamet

Team Hvilepuls fra PO Helse har designet og drifter denne fortellingen. Teamet består av medlemmer forskjellige fagfelt, hentet fra ulike teams i produktområdet.

Vi ønsker å eie, drifte og formidle dataen vi selv genererer. På denne måten forsøker vi å sikre at dataen som formidles, stemmer overens med det som faktisk skjer.

[Les mer om teamet i Teamkatalogen.](https://teamkatalog.nav.no/team/ea2ba8f9-b956-4d78-857e-93e547449fc5){.external target="_blank"}
:::

:::

::::


:::: {#section1}

::: {#section1-content}


### Søknader om sykepenger

Når den sykmeldte brukeren fyller ut og sender inn en søknad via. våre digitale tjenester mottar vi det som en førstegangssøknad i nytt saksbehandlingssystem. Da begynner saksbehandlingen fra vår side.

Om brukeren ønsker å endre søknaden og sende den på nytt, kaller vi det en korrigert søknad.

::: {.nokkeltall}

```{python}
# | class: nokkeltall
# | output: true
import datetime as dt
import locale

locale.setlocale(locale.LC_TIME, "no_NO")

current_date = dt.datetime.now().date()
formatted_date = current_date.strftime("%d. %B %Y").replace(
    current_date.strftime("%B"), current_date.strftime("%B").lower()
)

print(f"Innsendte søknader per {formatted_date}")

```

:::

```{python}


def antall_for_n_uker_siden(antall_uker_siden, timestamp_felt, tabell, tilleggspredikat=""):
    QUERY = f"""--sql
    SELECT
        COUNT(*)
    FROM `{tabell}`
    WHERE DATE_TRUNC(DATE({timestamp_felt}, 'Europe/Oslo'), WEEK(MONDAY)) >= DATE_TRUNC(DATE_SUB(DATE(CURRENT_TIMESTAMP(), 'Europe/Oslo'), INTERVAL {str(antall_uker_siden)} WEEK), WEEK(MONDAY))
    AND DATE_TRUNC(DATE({timestamp_felt}, 'Europe/Oslo'), WEEK(MONDAY)) < DATE_TRUNC(DATE_SUB(DATE(CURRENT_TIMESTAMP(), 'Europe/Oslo'), INTERVAL {str(antall_uker_siden)} - 1 WEEK), WEEK(MONDAY))
    {tilleggspredikat}
    """

    query_job = client.query(QUERY)
    rows = query_job.result()

    # get first value in first row of RowIterator
    return [row[0] for row in rows][0]


```

:::: {.nokkeltallboks-layout}

```{python}
# | class: nokkeltallboks-innhold
# | output: true
value = antall_for_n_uker_siden(
    2, "soknad_mottatt", "styringsinfo_dataset.styringsinfo_sendt_soknad_view"
)
print(f"{value}\nto uker siden")
```


```{python}
# | class: nokkeltallboks-innhold
# | output: true
value = antall_for_n_uker_siden(
    1, "soknad_mottatt", "styringsinfo_dataset.styringsinfo_sendt_soknad_view"
)
print(f"{value}\nforrige uke")
```


```{python}
# | class: nokkeltallboks-innhold
# | output: true
value = antall_for_n_uker_siden(
    0, "soknad_mottatt", "styringsinfo_dataset.styringsinfo_sendt_soknad_view"
)
print(f"{value}\ndenne uken")
```

::::

#

```{python}
# | class: no-rows
# | output: true

current_month = datetime.datetime.now().month
current_year = datetime.datetime.now().year

QUERY = f"""
    SELECT
        EXTRACT(DATE FROM soknad_mottatt AT TIME ZONE 'Europe/Oslo') AS date,
        DATE_TRUNC(EXTRACT(DATE FROM soknad_mottatt AT TIME ZONE 'Europe/Oslo'), WEEK(MONDAY)) as week,
        DATE_TRUNC(EXTRACT(DATE FROM soknad_mottatt AT TIME ZONE 'Europe/Oslo'), MONTH) as month,
        korrigerende,
        COUNT(*) as Totalt
    FROM `styringsinfo_dataset.styringsinfo_sendt_soknad_view`
    WHERE EXTRACT(YEAR FROM soknad_mottatt AT TIME ZONE 'Europe/Oslo') = {current_year}
        AND EXTRACT(MONTH FROM soknad_mottatt AT TIME ZONE 'Europe/Oslo') <= {current_month}
    GROUP BY date, week, month, korrigerende
    ORDER BY date ASC, korrigerende ASC
"""

query_job = client.query(QUERY)

df_days: pd.DataFrame = query_job.to_dataframe()
df_days_førstegangs = df_days[df_days.korrigerende == False]
df_days_korrigerende = df_days[df_days.korrigerende == True]

df_weeks = df_days.groupby(["week", "korrigerende"], as_index=False)["Totalt"].sum()
df_weeks_førstegang = df_weeks[df_weeks.korrigerende == False]
df_weeks_korrigerende = df_weeks[df_weeks.korrigerende == True]

df_months = df_days.groupby(["month", "korrigerende"], as_index=False)["Totalt"].sum()
df_months_førstegang = df_months[df_months.korrigerende == False]
df_months_korrigerende = df_months[df_months.korrigerende == True]

fig = go.Figure()
fig.add_traces(
    data=[
        go.Bar(
            x=df_months_førstegang.month,
            y=df_months_førstegang.Totalt,
            name="Førstegangs",
            visible=True,
            marker_color="#3380A5",
        ),
        go.Bar(
            x=df_months_korrigerende.month,
            y=df_months_korrigerende.Totalt,
            name="Korrigerende",
            visible=True,
            marker_color="#FF9100",
        ),
        go.Bar(
            x=df_weeks_førstegang.week,
            y=df_weeks_førstegang.Totalt,
            name="Førstegangs",
            visible=False,
            marker_color="#3380A5",
        ),
        go.Bar(
            x=df_weeks_korrigerende.week,
            y=df_weeks_korrigerende.Totalt,
            name="Korrigerende",
            visible=False,
            marker_color="#FF9100",
        ),
        go.Bar(
            x=df_days_førstegangs.date,
            y=df_days_førstegangs.Totalt,
            name="Førstegangs",
            visible=False,
            marker_color="#3380A5",
        ),
        go.Bar(
            x=df_days_korrigerende.date,
            y=df_days_korrigerende.Totalt,
            name="Korrigerende",
            visible=False,
            marker_color="#FF9100",
        ),
    ]
)

BUTTON_CONFIG = {
    "active": 0,
    "type": "buttons",
    "direction": "right",
    "showactive": True,
    "x": 0,
    "xanchor": "left",
    "y": 1,
    "yanchor": "bottom",
    "font": {"size": 14},
}

fig.update_layout(
    margin=dict(l=50),
    barmode="stack",
    updatemenus=[
        dict(
            buttons=list(
                [
                    dict(
                        args=[{"visible": [True, True, False, False, False, False]}],
                        label="Måneder",
                        method="restyle",
                    ),
                    dict(
                        args=[{"visible": [False, False, True, True, False, False]}],
                        label="Uker",
                        method="restyle",
                    ),
                    dict(
                        args=[{"visible": [False, False, False, False, True, True]}],
                        label="Dager",
                        method="restyle",
                    ),
                ]
            ),
            **BUTTON_CONFIG,
        )
    ],
    title=dict(
        text="Antall innsendte førstegangs- og korrigerte søknader",
        x=0,
        y=0.97,
        font=dict(family="Source Sans 3", size=20, color="#23262A"),
    ),
    plot_bgcolor="#FFFFFF",
    yaxis=dict(
        gridcolor="#CCCCCC",
    ),
)

fig.show()


```

```{python}
def fig_antall_med_glidende_gjennomsnitt(tittel, timestamp_felt, tabell, predikat=""):
    from plotly.subplots import make_subplots

    # SQL query to count number of rows per day and calculate moving averages
    QUERY = f"""
    SELECT 
    date, 
    count,
    AVG(count) OVER (
        ORDER BY date
        ROWS BETWEEN 6 PRECEDING AND CURRENT ROW
    ) AS moving_7_day_avg,
    AVG(count) OVER (
        ORDER BY date
        ROWS BETWEEN 27 PRECEDING AND CURRENT ROW
    ) AS moving_28_day_avg
    FROM (
        SELECT date_range.date AS date, IFNULL(original_table.count, 0) AS count
            FROM (
                SELECT *
                FROM UNNEST(GENERATE_DATE_ARRAY('2023-03-01', CURRENT_DATE())) AS date
            ) AS date_range
        LEFT JOIN (
        SELECT
            DATE({timestamp_felt}) AS date,
            COUNT(*) AS count
        FROM
            `{tabell}`
        {predikat}
        GROUP BY
            DATE({timestamp_felt})
            ) AS original_table
        ON date_range.date = original_table.date
    )
    WHERE date > '2023-03-01'
    ORDER BY 
    date
    """

    query_job = client.query(QUERY)

    df: pd.DataFrame = query_job.to_dataframe()

    fig = go.Figure()

    # Add bar chart for daily counts
    fig.add_trace(go.Bar(
                x=df["date"], 
                y=df["count"], 
                name="Antall per dag",
                marker_color="#3380A5",
                ))

    # Add lines for moving averages
    fig.add_trace(
        go.Scatter(
            x=df["date"], 
            y=df["moving_7_day_avg"], 
            name="Snitt over 7 dager",
            line=dict(color='#FF9100'),
            )
    )
    fig.add_trace(
        go.Scatter(
            x=df["date"], 
            y=df["moving_28_day_avg"], 
            name="Snitt over 28 dager",
            line=dict(color='#C30000')
            )
    )

    # Set x and y axis labels
    fig.update_layout(
        title=dict(
        text="7- og 28 dagers glidende gjennomsnitt",
        x=0,
        y=0.95,
        font=dict(family="Source Sans 3", size=20, color="#23262A"),
        ),
        plot_bgcolor="#FFFFFF",
        yaxis=dict(
        gridcolor="#CCCCCC",
        ),
    )

    return fig


```

```{python}
# | output: true

fig = fig_antall_med_glidende_gjennomsnitt(
    "Antall mottatte søknader per dag og 7- og 28-dagers glidende gjennomsnitt",
    "soknad_mottatt",
    "styringsinfo_dataset.styringsinfo_sendt_soknad_view",
)
# Show the figure
fig.show()
```

:::

::::


:::: {#section2}

::: {#section2-content}

### Fattede vedtak(?)


::: {.nokkeltall}

```{python}
# | class: nokkeltall
# | output: true

import datetime as dt

current_date = dt.datetime.now().date()
formatted_date = current_date.strftime("%d. %B %Y").replace(
    current_date.strftime("%B"), current_date.strftime("%B").lower()
)

print(f"Antall vedtak per {formatted_date}")

```

:::

::: {.nokkeltallboks-layout}
```{python}
vedtak_for_n_uker_siden = partial(antall_for_n_uker_siden, timestamp_felt="vedtak_fattet", tabell="styringsinfo_dataset.styringsinfo_vedtak_fattet_view", tilleggspredikat="AND har_utbetaling=true")
```

```{python}
# | class: nokkeltallboks-innhold-hvit
# | output: true

value = vedtak_for_n_uker_siden(2)
print(f"{value}\nto uker siden")

```


```{python}
# | class: nokkeltallboks-innhold-hvit
# | output: true

value = vedtak_for_n_uker_siden(1)
print(f"{value}\nforrige uke")
```


```{python}
# | class: nokkeltallboks-innhold-hvit
# | output: true

value = vedtak_for_n_uker_siden(0)
print(f"{value}\ndenne uken")
```

:::

#

```{python}
# | class: no-rows
# | output: true

import datetime
import plotly.graph_objects as go

current_month = datetime.datetime.now().month
current_year = datetime.datetime.now().year

QUERY = f"""
    SELECT
        EXTRACT(YEAR FROM vedtak_fattet AT TIME ZONE 'Europe/Oslo') AS year,
        EXTRACT(MONTH FROM vedtak_fattet AT TIME ZONE 'Europe/Oslo') AS month,
        COUNT(*) as Totalt
    FROM `styringsinfo_dataset.styringsinfo_vedtak_fattet_view`
    WHERE har_utbetaling=true
    AND EXTRACT(YEAR FROM vedtak_fattet AT TIME ZONE 'Europe/Oslo') = {current_year}
    AND EXTRACT(MONTH FROM vedtak_fattet AT TIME ZONE 'Europe/Oslo') <= {current_month}
    GROUP BY year, month
    ORDER BY year DESC, month DESC
"""

query_job = client.query(QUERY)

df_months: pd.DataFrame = query_job.to_dataframe()

# Create a new plotly figure
fig = go.Figure()

fig.add_trace(
    go.Bar(
        x=[
            f"{row['year']}-{row['month']:02}"
            for _, row in df_months.iterrows()
        ],
        y=df_months["Totalt"],
        text=df_months["Totalt"],
        textposition="auto",
        marker_color="#3380A5",
        marker_line_width=1,
        opacity=1,
    )
)

fig.update_layout(
    title=dict(
        text="Antall vedtak per måned",
        x=0,
        y=0.95,
        font=dict(family="Source Sans 3", size=20, color="#23262A"),
        ),
    xaxis_tickangle=-45,
    paper_bgcolor="rgba(0,0,0,0)",
    plot_bgcolor="rgba(0,0,0,0)",
    yaxis=dict(
        gridcolor="#CCCCCC",
        ),
)

fig.show()

```

```{python}
# | output: true

fig = fig_antall_med_glidende_gjennomsnitt(
    "Vedtak per dag og 7- og 28-dagers glidende gjennomsnitt",
    "vedtak_fattet",
    "styringsinfo_dataset.styringsinfo_vedtak_fattet_view",
    predikat="WHERE har_utbetaling=true"
)

fig.update_layout(
    paper_bgcolor="rgba(0,0,0,0)",
    plot_bgcolor="rgba(0,0,0,0)",
)

# Show the figure
fig.show()
```

#

:::

::::

:::: {#section3}

::: {#section3-content}

### Tid fra søknad til vedtak fattet

#

Vi ser nå på alle søknader som det ble fattet vedtak på i løpet av en uke, og betrakter hvor mange dager det gikk fra vi mottok søknaden til vedtaket ble fattet.

- Nøkkeltallene viser antall søknader som det ble fattet vedtak på totalt, hvor mange av dem som ble behandlet på under et døgn, samt søknader det har tatt mer enn 90 dager å behandle
- For tidsbruk mellom 1 og 90 dager viser grafen under fordelingen
- For vedtak med flere søknader bruker vi tidspunktet fra den søknaden som ble sendt inn sist


```{python}

QUERY = f"""
SELECT COUNT(*) AS antall_vedtak, dager_brukt, DATE_TRUNC(vedtak_fattet_dato, WEEK(MONDAY)) as week
    FROM `styringsinfo_dataset.styringsinfo_vedtak_tidsbruk`
    WHERE vedtak_fattet_dato >= CURRENT_DATE() - 21
    AND har_utbetaling = true
    GROUP BY dager_brukt, week
    ORDER BY dager_brukt desc
"""

query_job = client.query(QUERY)

df: pd.DataFrame = query_job.to_dataframe()
uker = sorted(df["week"].unique(), reverse=True)
i_dag = date.today()
inneværende_uke = uker[0] if len(uker) > 0 else i_dag
forrige_uke = uker[1] if len(uker) > 1 else inneværende_uke
to_uker_siden = uker[2] if len(uker) > 2 else forrige_uke

df_inneværende_uke = df[df.week == inneværende_uke]
df_forrige_uke = df[df.week == forrige_uke]
df_to_uker_siden = df[df.week == to_uker_siden]
beholder = [df_inneværende_uke, df_forrige_uke, df_to_uker_siden]
```


```{python}
# | output: true
from plotly.subplots import make_subplots

fig = make_subplots(
    rows=2,
    cols=3,
    specs=[
        [{"type": "indicator"}, {"type": "indicator"}, {"type": "indicator"}],
        [{"colspan": 3}, None, None],
    ],
)

for df, visible in zip(beholder, [True, False, False]):
    totalt = df["antall_vedtak"].values.sum()
    under_en_dag = df.query("dager_brukt == 0")["antall_vedtak"].values.sum()
    mer_enn_90_dager = df.query("dager_brukt > 90")["antall_vedtak"].values.sum()

    bar = go.Bar(
        x=df.query("dager_brukt > 0 & dager_brukt <= 90")["dager_brukt"],
        y=df.query("dager_brukt > 0 & dager_brukt <= 90")["antall_vedtak"],
        visible=visible,
    )

    fig.add_trace(bar, row=2, col=1)

    fig.add_trace(
        go.Indicator(
            title="Totalt",
            mode="number",
            value=totalt,
            number={"font": {"size": 48}},
            visible=visible,
        ),
        row=1,
        col=1,
    )
    fig.add_trace(
        go.Indicator(
            title="Under en dag",
            mode="number",
            value=under_en_dag,
            number={"font": {"size": 48}},
            visible=visible,
        ),
        row=1,
        col=2,
    )
    fig.add_trace(
        go.Indicator(
            title="Mer enn 90 dager",
            mode="number",
            number={"font": {"size": 48}},
            value=mer_enn_90_dager,
            visible=visible,
        ),
        row=1,
        col=3,
    )


BUTTON_CONFIG = {
    "active": 0,
    "type": "buttons",
    "direction": "right",
    "showactive": True,
    "x": 0,
    "xanchor": "left",
    "y": 1,
    "yanchor": "bottom",
    "font": {"size": 14},
}

fig.update_layout(
    xaxis_title="Dager gått til vedtaket ble fattet",
    xaxis_tick0=1,
    yaxis_title="Antall søknader",
    xaxis_tickangle=-45,
    paper_bgcolor="rgba(0,0,0,0)",
    plot_bgcolor="rgba(0,0,0,0)",
    updatemenus=[
        dict(
            buttons=list(
                [
                    dict(
                        args=[{"visible": [True] * 4 + [False] * 8}],
                        label="Inneværende uke",
                        method="restyle",
                    ),
                    dict(
                        args=[{"visible": [False] * 4 + [True] * 4 + [False] * 4}],
                        label="Forrige uke",
                        method="restyle",
                    ),
                    dict(
                        args=[{"visible": [False] * 8 + [True] * 4}],
                        label="To uker siden",
                        method="restyle",
                    ),
                ]
            ),
            **BUTTON_CONFIG,
        )
    ],
)

fig.show()

```

#

:::

::::

:::: {#section4}

::: {#section4-content}

### 4# Forkastede vedtaksperioder

#

En forkastet vedtaksperiode betyr at saksbehandlingssystemet har vurdert at perioden det søkes for ikke kan behandles i speil. Det trenger ikke nødvendigvis medføre at det opprettes gosys-oppgaver for de tilhørende søknadene. Det opprettes ikke oppgaver for korte perioder som er innenfor arbeidsgiverperioden. 

#

:::: {.nokkeltallboks-layout}

```{python}
# | class: nokkeltallboks-innhold
# | output: true

value = antall_for_n_uker_siden(
    2, "vedtak_forkastet", "styringsinfo_dataset.styringsinfo_vedtak_forkastet_view"
)
print(f"{value}\nto uker siden")

```


```{python}
# | class: nokkeltallboks-innhold
# | output: true

value = antall_for_n_uker_siden(
    1, "vedtak_forkastet", "styringsinfo_dataset.styringsinfo_vedtak_forkastet_view"
)
print(f"{value}\nforrige uke")
```


```{python}
# | class: nokkeltallboks-innhold
# | output: true

value = antall_for_n_uker_siden(
    0, "vedtak_forkastet", "styringsinfo_dataset.styringsinfo_vedtak_forkastet_view"
)
print(f"{value}\ndenne uken")
```


::::

#

```{python}
# | class: no-rows
# | output: true

import datetime
import plotly.graph_objects as go

current_month = datetime.datetime.now().month
current_year = datetime.datetime.now().year

QUERY = f"""
    SELECT
        EXTRACT(YEAR FROM vedtak_forkastet AT TIME ZONE 'Europe/Oslo') AS year,
        EXTRACT(MONTH FROM vedtak_forkastet AT TIME ZONE 'Europe/Oslo') AS month,
        COUNT(*) as Totalt
    FROM `styringsinfo_dataset.styringsinfo_vedtak_forkastet_view`
    WHERE EXTRACT(YEAR FROM vedtak_forkastet AT TIME ZONE 'Europe/Oslo') = {current_year}
        AND EXTRACT(MONTH FROM vedtak_forkastet AT TIME ZONE 'Europe/Oslo') <= {current_month}
    GROUP BY year, month
    ORDER BY year DESC, month DESC;
"""

query_job = client.query(QUERY)

df_months = query_job.to_dataframe()

# Create a new plotly figure
fig = go.Figure()

fig.add_trace(
    go.Bar(
        x=[f"{row['year']}-{row['month']:02}" for _, row in df_months.iterrows()],
        y=df_months["Totalt"],
        text=df_months["Totalt"],
        textposition="auto",
    )
)

fig.update_traces(marker_color="rgba(176, 193, 200, 1)", marker_line_width=1, opacity=1)

fig.update_layout(
    title="Forkastede vedtaksperioder per måned",
    xaxis_title="Måned",
    yaxis_title="Antall",
    xaxis_tickangle=-45,
    paper_bgcolor="rgba(0,0,0,0)",
)

fig.show()

```

#
```{python}
# | output: true
import datetime as dt

print(f"Sist oppdatert: {dt.datetime.now()}")
```


:::

::::